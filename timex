#!/bin/bash 

# 4/12/2013 Made mjpegtools deafult, changed file name method
# 4/9/2013  Added function to work without mjpegtools.
# 4/7/2013  Michael Cassera

# A BASH script to compress and combine GoPro video files for Time Lapse
#
# Default values are:		Date is new directory
#							Final File is Date+Rate.mp4
#							Rate is 24x normal speed
#							The Video is NOT uploaded to YouTube
#	
# Usage    timex [options] [path/]filename	
#
# Tools needed to run this script:	ffmpeg
#									mplayer
#									mjpegtools [optional]
#									youtube-upload [optional]
#

#Default Values
ytUser=username					# YouTube Username
ytPass=password					# YouTube Password
read dt <<< "`date -I`"			# Get date in -I format for File Name
rate="24"						# Video/Audio multiplier
YT=0							# upload to YouTube	(no)
Sound=1							# Compress sound default (yes)
mjpeg=1							# Use mjpegtools (yes)

# Functions to do the heavy lifting.  File is passed as ${1} to ffmpeg.
# Fuction Rip video from file and compress
function vidCompress()			# Use ffmpeg & mjpegtools to compress Video (Faster, better)
{		
	echo "   Ripping video & compressing." >>timex.log
	ffmpeg -i ${1} -f yuv4mpegpipe - | yuvfps -s $fps:1 -r 30:1  | ffmpeg -f yuv4mpegpipe -i - -b 28800k -y fast.mp4
}

function videoRipCompress()		# Use ffmpeg to compress Video (Slower Less Quality)
{
	mkdir tmp					# Make temp directory to store frames
	echo "   Ripping video to frames in tmp." >>timex.log
	ffmpeg -i ${1} -f image2 tmp/frame%7d.jpg	# extract frames from video

# Count frames and delete unused frames
	n="0"
	echo "Removing extra frames..."
	while read line					
	do
		n=$[$n+1]
		nm="frame"
		if [ $n -lt "10" ]	 	# add a "0" if less than 10
		then
			nm=$nm"0"
		fi
		if [ $n -lt "100" ]		# add a "0" if less than 100
		then
			nm=$nm"0"	
		fi
		if [ $n -lt "1000" ]	# add a "0" if less than 1000
		then
			nm=$nm"0"
		fi
		if [ $n -lt "10000" ]	# add a "0" if less than 10000
		then
			nm=$nm"0"
		fi
		if [ $n -lt "100000" ]	# add a "0" if less than 100000
		then
			nm=$nm"0"
		fi
		if [ $n -lt "1000000" ]	# add a "0" if less than 1000000
		then
			nm=$nm"0"
		fi
		nm=$nm$n".jpg"			# add the number $n + .jpg suffix to the filename
		
		keep=$[$n%$rate]		# is the remainder of frame/rate = 0
		if [ $keep = "0" ]
		then
			echo "keep "$nm		# Keep the frame divisible by rate
		else
			rm -f tmp/$nm		# Delete frames in between
		fi
	done <<< "`ls -1dtr tmp/*.jpg`"		# get all *.JPG files in mod order
	
# Now renumber frames to be used by ffmpeg	
	n="0"
	while read line			
	do
		n=$[$n+1]
		nm="frame"
		if [ $n -lt "10" ]	 	# add a "0" if less than 10
		then
		nm=$nm"0"
		fi
		if [ $n -lt "100" ]		# add a "0" if less than 100
		then
			nm=$nm"0"	
		fi
		if [ $n -lt "1000" ]	# add a "0" if less than 1000
		then
			nm=$nm"0"
		fi
		if [ $n -lt "10000" ]	# add a "0" if less than 10000
		then
			nm=$nm"0"
		fi
		if [ $n -lt "100000" ]	# add a "0" if less than 100000
		then
			nm=$nm"0"
		fi
		if [ $n -lt "1000000" ]	# add a "0" if less than 1000000
		then
			nm=$nm"0"
		fi
		nm=$nm$n".jpg"			# add the number i + .jpg suffix to the filename
		mv -v $line tmp/$nm			# rename the old file to the new file
	done <<< "`ls -1dtr tmp/*.jpg`"		# get all *.jpg files in mod order

	echo "   Rebuilding mp4 from frames." >>timex.log
	ffmpeg -f image2 -r 30 -i tmp/frame%7d.jpg -b 57600k -y fast.mp4
	echo "   Clearing tmp directory." >>timex.log
	rm -rfv tmp
}

# Function Rip audio from file and compress
function audioCompress()
{
	echo "   Ripping audio & compressing." >>timex.log
	ffmpeg -i ${1} -vn -ac 2 -ar 44100 -ab 128k -f mp3 sound.mp3
	mplayer -af scaletempo -speed $rate sound.mp3 -vc null -vo null -ao pcm:fast:waveheader:file=sound.wav
	rm -fv sound.mp3
	ffmpeg -i sound.wav -acodec libmp3lame -ab 128k sound.mp3
	rm -fv sound.wav
}

# Function Attach compressed audio to compressed viedo
function audio2video()
{
	echo "   Re-attaching audio to video." >>timex.log
	ffmpeg -i fast.mp4 -i sound.mp3 -shortest -vcodec copy -acodec copy fastA.mp4
	rm -fv sound.mp3
	rm -fv fast.mp4
}

# Function rerender to mpeg to append to working file
function render2mpg()
{
	echo "   Rendering to mpeg." >>timex.log
	ffmpeg -i fastA.mp4 -b 28800k temp.mpg
	rm -fv fastA.mp4
}

# Function Append new compressed file to working file
function add2work()
{
	echo "   Adding to work.mpg." >>timex.log
	cat work.mpg temp.mpg > temp2.mpg
	rm -fv work.mpg
	rm -fv temp.mpg
	mv temp2.mpg work.mpg
}

# Function for usage
function usage {
	echo
	echo "Usage: timex [options] "
	echo
	echo "	filename - name of final video file"
	echo "		default is date-rate.mp4"
	echo 
	echo "	Options"
	echo "	-r[rate]	Rate to speed up video, default is 24"
	echo "	-f	Do not use mjpeg tools to conpress video"
	echo "	-s	silent - do not include audio"
	echo "	-y	Upload to Youtube"
	echo "		Program will ask for name, description, user and password"
	echo " 	-o 	output filename"
	echo "	-h	This help message"
	echo
	echo "	Tools needed to run this script:"	
	echo "			ffmpeg	(Video I/O)"
	echo "			mjpegtools  (Video Compression)"
	echo "			mplayer	 (Audio Compression)"
	echo "			youtube-upload  (Command Line upload to Youtube)"
	echo 
}


#  Program Starts here.
#  Check parameters
while getopts r:fsyho: option
do
	case $option in
	r)
		rate=$OPTARG
		;;
	f)
		mjpeg=0
		;;		
	s)
		Sound=0 	# Do not compress sound
		;;			
	y)
		YT=1
		;;		
	h)
		usage
		exit 0;;	
	o)
		fn=$OPTARG
		;;
	*)				# Any other option is an error
		usage
		exit 1;;		
	esac
done


#  Start Log File
echo "timex log file" > timex.log
echo >>timex.log
 

#  Run a directory listing and store in an array.  The listing is sorted by modified date.
echo "File List:" >>timex.log
echo "File List:"
while read line
do
	fname=("${fname[@]}" $line)
	echo $line >>timex.log
	echo $line
done <<< "`ls -1dtr *.MP4`"
echo
echo >>timex.log	

#  Calculate rate for ffmpeg 
fps=$[$rate*30]
echo "Rate is "$rate"X, "$fps" frame/sec."
echo "Rate is "$rate"X, "$fps" frame/sec." >>timex.log
echo

#  Get Youtube info if uploading to Youtube
if [ $YT = "1" ]
then
	echo -n 'Enter the title of the Video>  '
	read YTTitle					#The Title
	echo -n 'Enter a short description of the Video> '
	read YTDescription				#The Description
	echo "Will upload to YouTube with the title: "$YTTitle >>timex.log
	echo >>timex.log
	echo -n 'Enter YouTube username> '
	read ytUser
	echo -n 'Enter YouTube password> '
	read -s ytPass
else
	echo "Not uploading to YouTube" >>timex.log
	echo >>timex.log
fi


#  Create name of final video name
if [ -z "$fn" ];					# if no filename was given
then
	fn=$dt-$rate.mp4				# set to default name
fi				
echo "Final Video name is: "$fn >>timex.log
echo >>timex.log


#  Run a loop to pass file names to time lapse function	
i="0"								# The Counter
x=${#fname[@]}						# Number of elements in the array
while [ $i -lt $x ]
do
	date >>timex.log				# Time Stamp log file
	echo " Working on "${fname[$i]}"." >>timex.log
	if [ $mjpeg = "1" ]				# Compress Video
	then
		vidCompress ${fname[$i]}	# Used mjpeg tools	
	else
		videoRipCompress ${fname[$i]}	# Use ffmpeg
	fi
	if [ $Sound = "1" ]
	then
		audioCompress ${fname[$i]}	# rip & compress Audio
		audio2video					# combine audio to video
	else
		mv fast.mp4 fastA.mp4		# skip audio compression, just rename
	fi
	render2mpg						# render to mpg
	add2work						# append to work.mpg
	i=$[$i+1]						# next file
	echo >>timex.log
done	


#  Finish up by turning work.mpg to mp4 with date & rate in name. Remove work file.	
date >>timex.log
echo "   Rendering final video" >>timex.log
echo >>timex.log
ffmpeg -i work.mpg -b 28800k $fn
rm -fv work.mpg


#  Upload to YouTube if YT = 1
if [ $YT = "1" ] 
then
	date >>timex.log
	echo "   Uploading "$YTTitle" to YouTube" >>timex.log
	echo >>timex.log
	youtube-upload --email $ytUser --password=$ytPass --title="$YTTitle" --description="$YTDescription" --category="Sports" $fn 
fi

#  We are done!
date >>timex.log
echo "   Done!" >>timex.log


